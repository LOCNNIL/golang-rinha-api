version: "3.8"
services:
  db:
    image: postgres:15
    container_name: db
    hostname: db
    restart: "no"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    expose:
      - "${POSTGRES_PORT}"
    deploy:
      resources:
        limits:
          cpus: "0.7"
          memory: "1GB"
    volumes:
      - postgres-db:/var/lib/postgresql/data
      - ./scripts/postgres/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 15s
      timeout: 25s
    command:
      [
        "postgres",
        "-c",
        "config_file=/docker-entrypoint-initdb.d/postgresql.conf",
      ]
  
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: "no"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASS}
    ports:
      - "16543:80"
    depends_on:
      - db

  api1:
    image: lincolnwallace/rinha-golang-locnnil:latest
    container_name: api1
    restart: always
    hostname: api1
    environment:
      - APPLICATION_PORT=8080
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=rinha
      - POSTGRES_CONNECTION_RETRIES=3
      - POSTGRES_RETRIES_INTERVAL=5 
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8080"
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "0.5GB"

  api2:
    image: lincolnwallace/rinha-golang-locnnil:latest
    container_name: api2
    restart: always
    hostname: api2
    environment:
      - APPLICATION_PORT=8080
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=rinha
      - POSTGRES_CONNECTION_RETRIES=3
      - POSTGRES_RETRIES_INTERVAL=5 
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8080"
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "0.5GB"

  nginx:
    image: nginx
    hostname: api
    volumes:
      - ./scripts/nginx/:/etc/nginx/
    depends_on:
      - api1
      - api2
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "0.5GB"

volumes:
  postgres-db:

networks:
  default:
    driver: bridge
